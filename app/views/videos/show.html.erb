<div id="show_video">
  <div id="show_video_main">
    <div id="show_video_title">
      <span class="title"><%= @video.title %></span>
      <span class="time_stamp"><%= @video.created_at.strftime("%b %d, %Y") %>, by </span>
      <span class="creator"><%= @video.user.name %></span>
    </div>
    <div id="show_video_video_wrapper">
      <div id="ytplayer">
      </div>
    </div>
    <div id="show_video_description">
      <p>
        A dyno is a lightweight container running a single user-specified command. You can think of it as a virtualized Unix container—it can run any command available in its default environment (what we supply in the Cedar stack) combined with your app’s slug (which will be based on your code and its dependencies).
      </p>
    </div>
    <div id="show_video_share">
      <span>Share this post</span>
      <%= link_to(image_tag('facebook.png'), root_path) %>
      <%= link_to(image_tag('twitter.png'), root_path) %>
      <%= link_to(image_tag('linkedIn.png'), root_path) %>
      <%= link_to(image_tag('gplus.png'), root_path) %>
      <%= link_to(image_tag('rss.png'), root_path) %>
    </div>
    <p class="commend_count"><fb:comments-count href=<%= request.protocol + request.host + url_for(:controller => 'videos', :action => 'show', :id => @video.id ) %>></fb:comments-count> Comments</p>
    <div class="fb-comments" data-href="<%= request.original_url %>" data-colorscheme="dark" data-numposts="10" data-width="677"></div>
  </div>
  <div id="show_video_banner">
    <div id="show_video_banner_1_wrapper">
      <%= link_to(image_tag('banner_1.jpg'), root_path) %>
    </div>
    <div id="show_video_banner_2_wrapper">
      <%= link_to(image_tag('banner_2.jpg'), root_path) %>
    </div>
  </div>
</div>

<script type="text/javascript">
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('ytplayer', {
            height: '343',
            width: '630',
            videoId: '<%= @video.youtube_id %>',
            events: {
                'onStateChange': onPlayerStateChange
            }
        });
    }
    function onPlayerStateChange(event) {
        if (event.data  == 1) {
          $.ajax('', {
            url: "<%= increase_count_path %>",
            data: { id: "<%= @video.id %>"},
            type: 'PUT',
          });
        }
    }
</script>