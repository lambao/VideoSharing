<!DOCTYPE html>
<html>
<%# Check Request controller to get right css files %>
<head>
  <title>VideoSharing</title>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <% if old_style? %>
  <%=   stylesheet_link_tag("custom", media: "all") %>
  <% else %>
  <%=   stylesheet_link_tag("newhome", media: "all") %>
  <% end %>
  <%= csrf_meta_tags %>
</head>
<body>
<div id="fb-root"></div>
<script>
    window.fbAsyncInit = function() {
        FB.init({
            appId      : '1409978785898929', // App ID
            channelUrl : '<%= request.protocol + request.host %>/channel.html', // Channel File
            status     : true, // check login status
            cookie     : true, // enable cookies to allow the server to access the session
            xfbml      : true  // parse XFBML
        });

        // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
        // for any authentication related change, such as login, logout or session refresh. This means that
        // whenever someone who was previously logged out tries to log in again, the correct case below
        // will be handled.
        FB.Event.subscribe('auth.authResponseChange', function(response) {
            // Here we specify what we do with the response anytime this event occurs.
            if (response.status === 'connected') {
                // The response object is returned with a status field that lets the app know the current
                // login status of the person. In this case, we're handling the situation where they
                // have logged in to the app.
                testAPI();
            } else if (response.status === 'not_authorized') {
                // In this case, the person is logged into Facebook, but not into the app, so we call
                // FB.login() to prompt them to do so.
                // In real-life usage, you wouldn't want to immediately prompt someone to login
                // like this, for two reasons:
                // (1) JavaScript created popup windows are blocked by most browsers unless they
                // result from direct interaction from people using the app (such as a mouse click)
                // (2) it is a bad experience to be continually prompted to login upon page load.
                FB.login();
            } else {
                // In this case, the person is not logged into Facebook, so we call the login()
                // function to prompt them to do so. Note that at this stage there is no indication
                // of whether they are logged into the app. If they aren't then they'll see the Login
                // dialog right after they log in to Facebook.
                // The same caveats as above apply to the FB.login() call here.
                FB.login();
            }
        });
    };

    (function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/en_US/all.js";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));

</script>

<% if !old_style?  %>
<%= render 'layouts/header' %>
<%= yield %>
<%= render 'layouts/footer' %>
<%# render old layout  %>
<% else %>
<%= render 'layouts/old_header' %>
    <div class="container">
      <% flash.each do |key, value| %>
          <div class="alert alert-<%= key %>"><%= value %></div>
      <% end %>
      <div class="row-fluid">
        <div class="span10">
          <%= yield %>
        </div>
        <div class="span2">
          <%= render 'layouts/aside' %>
        </div>
      </div>
    </div>
<% end %>
<div>
  <%= debug(params) if Rails.env.development? %>
</div>
</body>
</html>
